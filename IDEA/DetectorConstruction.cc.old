//
// ********************************************************************
// * License and Disclaimer                                           *
// *                                                                  *
// * The  Geant4 software  is  copyright of the Copyright Holders  of *
// * the Geant4 Collaboration.  It is provided  under  the terms  and *
// * conditions of the Geant4 Software License,  included in the file *
// * LICENSE and available at  http://cern.ch/geant4/license .  These *
// * include a list of copyright holders.                             *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.  Please see the license in the file  LICENSE  and URL above *
// * for the full disclaimer and the limitation of liability.         *
// *                                                                  *
// * This  code  implementation is the result of  the  scientific and *
// * technical work of the GEANT4 collaboration.                      *
// * By using,  copying,  modifying or  distributing the software (or *
// * any work based  on the software)  you  agree  to acknowledge its *
// * use  in  resulting  scientific  publications,  and indicate your *
// * acceptance of all terms of the Geant4 Software license.          *
// ********************************************************************
//
/// \file hadronic/Hadr03/src/DetectorConstruction.cc
/// \brief Implementation of the DetectorConstruction class
//

#include "DetectorConstruction.hh"
#include "DetectorMessenger.hh"
#include "G4Material.hh"
#include "G4NistManager.hh"
#include "G4Box.hh"
#include "G4Trd.hh"
#include "G4Tubs.hh"
#include "G4Sphere.hh"
#include "G4LogicalVolume.hh"
#include "G4PVPlacement.hh"
#include "G4UniformMagField.hh"
#include "G4VisAttributes.hh"
#include "G4GeometryManager.hh"
#include "G4PhysicalVolumeStore.hh"
#include "G4LogicalVolumeStore.hh"
#include "G4SolidStore.hh"
#include "G4Colour.hh"
#include "G4UnitsTable.hh"
#include "G4SystemOfUnits.hh"
#include "G4PhysicalConstants.hh"

// Per gli scintillatori
#include "G4MaterialPropertiesTable.hh"
#include "G4LogicalBorderSurface.hh"
#include "G4LogicalSkinSurface.hh"
#include "G4OpticalSurface.hh"
#include "G4MaterialTable.hh"
#include "G4OpBoundaryProcess.hh"


// Per calcolare il valore assoluto e fare eventualmente delle print
#include <stdio.h>
#include <stdlib.h>
#include <string>
#include <iostream>
#include <math.h>

#include "G4NeutronHPThermalScatteringNames.hh"

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

DetectorConstruction::DetectorConstruction()
:fPBox(0), fLBox(0), fMaterial(0), fMagField(0)
{
  fBoxSize = 60*cm;
  DefineMaterials();
  //  SetMaterial("Uranium238");  
  fDetectorMessenger = new DetectorMessenger(this);
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

DetectorConstruction::~DetectorConstruction()
{ delete fDetectorMessenger;}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

G4VPhysicalVolume* DetectorConstruction::Construct()
{
  return ConstructVolumes();
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

void DetectorConstruction::DefineMaterials()
{
 // define a Material from isotopes

  /*
    MaterialWithSingleIsotope("Litium6",      "Li6",    2.64*g/cm3, 3,  6);
  */
 // or use G4-NIST materials data base
 //
  // G4NistManager* man = G4NistManager::Instance();
  //man->FindOrBuildMaterial("G4_B");

 G4cout << *(G4Material::GetMaterialTable()) << G4endl;
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

G4Material* DetectorConstruction::MaterialWithSingleIsotope( G4String name,
                           G4String symbol, G4double density, G4int Z, G4int A)
{
 // define a material from an isotope
 //
 G4int ncomponents;
 G4double abundance, massfraction;

 G4Isotope* isotope = new G4Isotope(symbol, Z, A);
 
 G4Element* element  = new G4Element(name, symbol, ncomponents=1);
 element->AddIsotope(isotope, abundance= 100.*perCent);
 
 G4Material* material = new G4Material(name, density, ncomponents=1);
 material->AddElement(element, massfraction=100.*perCent);

 return material;
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

G4VPhysicalVolume* DetectorConstruction::ConstructVolumes()
{
  // Cleanup old geometry
  G4GeometryManager::GetInstance()->OpenGeometry();
  G4PhysicalVolumeStore::GetInstance()->Clean();
  G4LogicalVolumeStore::GetInstance()->Clean();
  G4SolidStore::GetInstance()->Clean();


  // Sizes
  G4double worldR = 20.0*m;
  G4double worldZ = 20.0*m;


  //////////////////////////////////////////////////////////////////////////////////////////////////
  /////                                        IDEA                                            /////
  //////////////////////////////////////////////////////////////////////////////////////////////////

  // -------------------------------------------------------------------------
  // WORLD
  // -------------------------------------------------------------------------
  G4Tubs* solidW = new G4Tubs("World",0.,worldR,worldZ,0.,twopi);
  //logicWorld = new G4LogicalVolume( solidW, G4NistManager::Instance()->FindOrBuildMaterial("G4_Galactic"),"World");
  logicWorld = new G4LogicalVolume( solidW, G4NistManager::Instance()->FindOrBuildMaterial("G4_AIR"),"World");
  physiWorld = new G4PVPlacement(0,G4ThreeVector(),logicWorld,"physiWorld",0,false,0);
  // fine World---------------------------------------------------------------

  
  // -------------------------------------------------------------------------
  // Cylinder
  // -------------------------------------------------------------------------
  G4double innerRadius = 1050.*mm;
  G4double outerRadius = 1250.*mm;
  G4double hz = 1250.*mm;
  G4double startAngle = 0.*deg;
  G4double spanningAngle = 360.*deg;
  G4ThreeVector positionPreshower = G4ThreeVector (0., 0., 0.);
  
  G4Tubs* solidPreshower = new G4Tubs ("solidPreshower", innerRadius, outerRadius, hz, startAngle, spanningAngle);

  logicPreshower = new G4LogicalVolume (solidPreshower, G4NistManager::Instance()->FindOrBuildMaterial("G4_POLYETHYLENE"), "logicPreshower", 0, 0, 0);

  new G4PVPlacement(0,            
                    positionPreshower,  
                    logicPreshower,    
                    "physPreshower",  
                    logicWorld,     
                    false,          
                    0);             

  // -------------------------------------------------------------------------
  // mu-RWELL
  // -------------------------------------------------------------------------
  G4double rwell_x = (500./2.)*mm;
  G4double rwell_y = (20./2.)*mm;
  G4double rwell_z = (500./2.)*mm;
  G4double px, py, pz;
  // 13 sector with 5 chambers along Z-axis:
  // we define the angle in the plane XY occupied by each chamber
  // taking into account a minimum separation between each other (given by the rest divided per 13!)
  G4double rwell_rotAngle = (0.46748636173 + 0.01583558497)*rad;
  G4int rwell_nCopyXY = 13;
  G4int rwell_nCopyZ = 5;
 
  G4Box* solidRwell = new G4Box ("solidRwell", rwell_x, rwell_y, rwell_z);

  logicRwell = new G4LogicalVolume (solidRwell, G4NistManager::Instance()->FindOrBuildMaterial("G4_POLYETHYLENE"), "logicRwell", 0, 0, 0);

  G4RotationMatrix *zRot[13];
  /*
  for (G4int i=0; i < rwell_nCopyXY; i++)
    {
      zRot[i] = new G4RotationMatrix;
      zRot[i] -> rotateZ (i * rwell_rotAngle);
    }
  */  
  for (G4int i=0; i < rwell_nCopyXY; i++)
    {
      zRot[i] = new G4RotationMatrix;
      zRot[i] -> rotateZ (i * rwell_rotAngle);
      px = (innerRadius + rwell_y) * cos((twopi/4.) - i * rwell_rotAngle);   
      py = (innerRadius + rwell_y) * sin((twopi/4.) - i * rwell_rotAngle);   

      for (G4int z=0; z < rwell_nCopyZ; z++)
	{
	  pz = -hz + (2*z+1) * rwell_z;
	  new G4PVPlacement (zRot[i], G4ThreeVector (px, py, pz), logicRwell, "physRwell", logicPreshower, false, i*rwell_nCopyZ + z);
	}
    }
 
  PrintParameters();

  

  //----------------------------------------------------------------------
  // ATTENZIONE!!!!!!!
  //----------------------------------------------------------------------

  // Sfera "Killing" necessaria ad uccidere le particelle che si avvicinano
  // ad OutWorld. La presenza del PostStep nello SteppingAction determina il 
  // segmentation fault quando ci si avvicina al OutWorld
  
  G4double r_est = 9.9*m;
  G4double r_int = 9.899*m;
  
  G4Sphere* solidKilling = new G4Sphere("solidKilling", r_int, r_est, 0., twopi, 0., twopi);

  
  logicKilling = new G4LogicalVolume(solidKilling,
				    G4NistManager::Instance()->FindOrBuildMaterial("G4_Galactic"), "logicKilling");
  
  new G4PVPlacement(0,G4ThreeVector(0., 0., 0.),logicKilling,
		    "physiKilling",logicWorld,false,0);
  


  // Colors
  
  logicWorld->SetVisAttributes(G4VisAttributes::Invisible);
  logicKilling->SetVisAttributes(G4VisAttributes::Invisible);
  
  //  G4VisAttributes* verdecolor = new G4VisAttributes(G4Colour(0.0, 1.0, 0.0));//verde
  G4VisAttributes* redcolor = new G4VisAttributes(G4Colour(1.0, 0.0, 0.0));//red
  // G4VisAttributes* cyancolor = new G4VisAttributes(G4Colour(0.0, 1.0, 1.0));//cyan
  G4VisAttributes* blucolor = new G4VisAttributes(G4Colour(0.0, 0.0, 1.0));//blu 
  G4VisAttributes* giallocolor = new G4VisAttributes(G4Colour(1.0, 1.0, 0.0));// giallo 
  // G4VisAttributes* magentacolor = new G4VisAttributes(G4Colour(1.0, 0.0, 1.0));//magenta
  // G4VisAttributes* grigiocolor = new G4VisAttributes(G4Colour(0.5, 0.5, 0.5));//grigio
  
  //Poly
  logicPreshower->SetVisAttributes(redcolor);//era grigio
  logicRwell->SetVisAttributes(blucolor);//era grigio
 
  G4cout << *(G4Material::GetMaterialTable()) << G4endl;
  return physiWorld;
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

void DetectorConstruction::PrintParameters()
{
  //  G4cout << "\n The Box is " << G4BestUnit(fBoxSize,"Length")
  //       << " of " << fMaterial->GetName() 
  //       << "\n \n" << fMaterial << G4endl;
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

void DetectorConstruction::SetMaterial(G4String materialChoice)
{
  // search the material by its name
  ////G4Material* pttoMaterial = G4Material::GetMaterial(materialChoice);
  G4Material* pttoMaterial = 
     G4NistManager::Instance()->FindOrBuildMaterial(materialChoice);
  
  if (pttoMaterial) { fMaterial = pttoMaterial;
    } else {
    G4cout << "\n--> warning from DetectorConstruction::SetMaterial : "
           << materialChoice << " not found" << G4endl;
  }              
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

void DetectorConstruction::SetSize(G4double value)
{
  fBoxSize = value;
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

#include "G4FieldManager.hh"
#include "G4TransportationManager.hh"

void DetectorConstruction::SetMagField(G4double fieldValue)
{
  //apply a global uniform magnetic field along Z axis
  G4FieldManager* fieldMgr
   = G4TransportationManager::GetTransportationManager()->GetFieldManager();

  if (fMagField) delete fMagField;        //delete the existing magn field

  if (fieldValue!=0.)                        // create a new one if non nul
    {
      fMagField = new G4UniformMagField(G4ThreeVector(0.,0.,fieldValue));
      fieldMgr->SetDetectorField(fMagField);
      fieldMgr->CreateChordFinder(fMagField);
    }
   else
    {
      fMagField = 0;
      fieldMgr->SetDetectorField(fMagField);
    }
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

#include "G4RunManager.hh"

void DetectorConstruction::UpdateGeometry()
{
  G4RunManager::GetRunManager()->DefineWorldVolume(ConstructVolumes());
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......
